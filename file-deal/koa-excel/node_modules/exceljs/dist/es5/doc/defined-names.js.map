{"version":3,"sources":["../../../lib/doc/defined-names.js"],"names":["_","require","colCache","CellMatrix","Range","rangeRegexp","DefinedNames","matrixMap","prototype","getMatrix","name","matrix","add","locStr","location","decodeEx","addEx","top","col","left","right","row","bottom","address","sheetName","n2l","addCellEx","remove","removeEx","removeCellEx","removeAllNames","each","forEach","callback","cell","getNames","addressStr","getNamesEx","map","findCellEx","filter","Boolean","_explore","mark","range","x","y","vGrow","yy","edge","c","findCellAt","hGrow","xx","cells","push","i","length","getRanges","ranges","$shortRange","normaliseMatrix","forEachInSheet","spliceRows","start","numDelete","numInsert","spliceColumns","model","definedName","value","rangeStr","test","split","pop","addCell","module","exports"],"mappings":"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","file":"defined-names.js","sourcesContent":["'use strict';\n\nconst _ = require('../utils/under-dash');\nconst colCache = require('../utils/col-cache');\nconst CellMatrix = require('../utils/cell-matrix');\nconst Range = require('./range');\n\nconst rangeRegexp = /[$](\\w+)[$](\\d+)(:[$](\\w+)[$](\\d+))?/;\n\nconst DefinedNames = function() {\n  this.matrixMap = {};\n};\n\nDefinedNames.prototype = {\n  getMatrix(name) {\n    const matrix = this.matrixMap[name] ||\n      (this.matrixMap[name] = new CellMatrix());\n    return matrix;\n  },\n\n  // add a name to a cell. locStr in the form SheetName!$col$row or SheetName!$c1$r1:$c2:$r2\n  add(locStr, name) {\n    const location = colCache.decodeEx(locStr);\n    this.addEx(location, name);\n  },\n  addEx(location, name) {\n    const matrix = this.getMatrix(name);\n    if (location.top) {\n      for (let col = location.left; col <= location.right; col++) {\n        for (let row = location.top; row <= location.bottom; row++) {\n          const address = {\n            sheetName: location.sheetName,\n            address: colCache.n2l(col) + row,\n            row: row,\n            col: col\n          };\n\n          matrix.addCellEx(address);\n        }\n      }\n    } else {\n      matrix.addCellEx(location);\n    }\n  },\n\n  remove(locStr, name) {\n    const location = colCache.decodeEx(locStr);\n    this.removeEx(location, name);\n  },\n  removeEx(location, name) {\n    const matrix = this.getMatrix(name);\n    matrix.removeCellEx(location);\n  },\n  removeAllNames(location) {\n    _.each(this.matrixMap, matrix => {\n      matrix.removeCellEx(location);\n    });\n  },\n\n  forEach(callback) {\n    _.each(this.matrixMap, (matrix, name) => {\n      matrix.forEach(cell => {\n        callback(name, cell);\n      });\n    });\n  },\n\n  // get all the names of a cell\n  getNames(addressStr) {\n    return this.getNamesEx(colCache.decodeEx(addressStr));\n  },\n  getNamesEx(address) {\n    return _.map(\n      this.matrixMap,\n      (matrix, name) => matrix.findCellEx(address) && name\n    ).filter(Boolean);\n  },\n\n  _explore(matrix, cell) {\n    cell.mark = false;\n    const {sheetName} = cell;\n\n    const range = new Range(cell.row, cell.col, cell.row, cell.col, sheetName);\n    let x, y;\n\n    // grow vertical - only one col to worry about\n    function vGrow(yy, edge) {\n      const c = matrix.findCellAt(sheetName, yy, cell.col);\n      if (!c || !c.mark) { return false; }\n      range[edge] = yy;\n      c.mark = false;\n      return true;\n    }\n    for (y = cell.row - 1; vGrow(y, 'top'); y--);\n    for (y = cell.row + 1; vGrow(y, 'bottom'); y++);\n\n    // grow horizontal - ensure all rows can grow\n    function hGrow(xx, edge) {\n      const cells = [];\n      for (y = range.top; y <= range.bottom; y++) {\n        const c = matrix.findCellAt(sheetName, y, xx);\n        if (c && c.mark) {\n          cells.push(c);\n        } else {\n          return false;\n        }\n      }\n      range[edge] = xx;\n      for (let i = 0; i < cells.length; i++) {\n        cells[i].mark = false;\n      }\n      return true;\n    }\n    for (x = cell.col - 1; hGrow(x, 'left'); x--);\n    for (x = cell.col + 1; hGrow(x, 'right'); x++);\n\n    return range;\n  },\n\n  getRanges(name, matrix) {\n    matrix = matrix || this.matrixMap[name];\n\n    if (!matrix) {\n      return { name: name, ranges: [] };\n    }\n\n    // mark and sweep!\n    matrix.forEach(cell => { cell.mark = true; });\n    const ranges = matrix.map(cell => cell.mark && this._explore(matrix, cell))\n      .filter(Boolean)\n      .map(range => range.$shortRange);\n\n    return {\n      name: name, ranges: ranges\n    };\n  },\n\n  normaliseMatrix(matrix, sheetName) {\n    // some of the cells might have shifted on specified sheet\n    // need to reassign rows, cols\n    matrix.forEachInSheet(sheetName, (cell, row, col) => {\n      if (cell) {\n        if ((cell.row !== row) || (cell.col !== col)) {\n          cell.row = row;\n          cell.col = col;\n          cell.address = colCache.n2l(col) + row;\n        }\n      }\n    });\n  },\n\n  spliceRows(sheetName, start, numDelete, numInsert) {\n    _.each(this.matrixMap, matrix => {\n      matrix.spliceRows(sheetName, start, numDelete, numInsert);\n      this.normaliseMatrix(matrix, sheetName);\n    });\n  },\n\n  spliceColumns(sheetName, start, numDelete, numInsert) {\n    _.each(this.matrixMap, matrix => {\n      matrix.spliceColumns(sheetName, start, numDelete, numInsert);\n      this.normaliseMatrix(matrix, sheetName);\n    });\n  },\n\n  get model() {\n    // To get names per cell - just iterate over all names finding cells if they exist\n    return _.map(this.matrixMap, (matrix, name) => this.getRanges(name, matrix))\n      .filter(definedName => definedName.ranges.length);\n  },\n  set model(value) {\n    // value is [ { name, ranges }, ... ]\n    const matrixMap = this.matrixMap = {};\n    value.forEach(definedName => {\n      var matrix = matrixMap[definedName.name] = new CellMatrix();\n      definedName.ranges.forEach(function(rangeStr) {\n        if (rangeRegexp.test(rangeStr.split('!').pop() || '')) {\n          matrix.addCell(rangeStr);\n        }\n      });\n    });\n  }\n};\n\nmodule.exports = DefinedNames;\n"]}